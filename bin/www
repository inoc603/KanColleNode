var net = require('net')
  , httpPort = 5050
  , httpParser = require('http-string-parser')
  , querystring = require('querystring')
  , request = require('request')
  , config = require('../lib/config')
  , _ = require('underscore')
  , http = require('http')
  , fs = require('fs')
  , debug = require('debug')('KanColleNode:server')
  , SocksHttpAgent = require('socks5-http-client/lib/Agent')
  , socks5 = require('socks5-client')

  , simpleProxy = false
  , proxyHost
  , proxyPort
  , debugging = 0



if (config.config.proxy) {
  console.log('simple')
  simpleProxy = true
  var proxy = config.config.proxy.split(':')
  proxyHost = proxy[0]
  proxyPort = (proxy[1]?parseInt(proxy[1]):80)
}
else {
  simpleProxy = false
  proxyHost = '127.0.0.1'
  proxyPort = 3001
}

console.log(proxyHost, proxyPort)

var tcpProxy = net.createServer(function (socket) {
  var proxy = net.connect(proxyPort, proxyHost)
    , kcn = net.connect(3001, '127.0.0.1')
    , kcnFilter = new KcnFilter()

  socket.setKeepAlive(true)

  var unset = true
  socket.on('data', function (data) {
    if (unset) {
      if (data.toString().search('Host: 127.0.0.1:3001') != -1) {
        proxy.end()
        kcn.write(data)
        socket.pipe(kcn).pipe(socket)
      }
      else {
        kcn.end()
        kcnFilter.reqParser.write(data)
        socket
          .pipe(kcnFilter.reqParser)
          .pipe(proxy)
          .pipe(kcnFilter.resParser)
          .pipe(socket)
      }
      unset = false
    }
  })
  socket.on('error', function (err) {
    console.log(err)
  })
  proxy.on('error', function (err) {
    console.log(err)
  })
  kcn.on('error', function (err) {
    console.log(err)
  })
})

tcpProxy.listen(httpPort, 'localhost')

// Create HTTP server.
// var app = require('../app')(io)
var server = http.createServer()

var globals = require('../lib/globals')
globals.io = require('../lib/socketio')(server)
var io = globals.io
  , app = require('../app')
  , KcnFilter = require('../lib/http-filter')
server.addListener('request', app)

// Listen on provided port, on all network interfaces.
server.listen(app.get('port'), 'localhost')

var regex_hostport = /^([^:]+)(:([0-9]+))?$/

function getHostPortFromString( hostString, defaultPort ) {
  var host = hostString
  var port = defaultPort

  var result = regex_hostport.exec( hostString )
  if ( result != null ) {
    host = result[1]
    if ( result[2] != null ) {
      port = result[3]
    }
  }

  return( [ host, port ] )
}

// add connect listener to the server so it can handle https proxy requests
server.addListener('connect', function (req, socketRequest, bodyhead) {
    var url = req.url
      , httpVersion = req.httpVersion
      , pHost
      , pPort

    //
    if (simpleProxy) {
      pHost = proxyHost
      pPort = proxyPort

    }
    else {
      var hostport = getHostPortFromString( url, 443 )
      pHost = hostport[0]
      pPort = parseInt( hostport[1] )
    }

    // set up tcp connection with the server


    switch (config.get('proxy-type')) {
      case 'http':
        var options = _.omit(req, 'proxy-connection')
        break
      case 'socks5':
        var remote = socks5.createConnection({
          socksHost: 'localhost'
        , socksPort: 1080
        , host: req.headers.host
        , port: 443
        })
        remote.on('connect', function () {
          socketRequest.write('HTTP/1.1 200 Connection Established\r\nConnection: close\r\n\r\n')
          remote.write(bodyhead)
          socketRequest.on('data', function (data) {
            remote.write(data)
          })
          remote.on('data', function (data) {
            socketRequest.write(data)
          })
          remote.on('end', function () {
            socketRequest.end()
          })
          socketRequest.on('end', function () {
            remote.end()
          })
        })
        break
      default:
        var proxySocket = net.connect(pPort, pHost, function () {
          proxySocket.write(bodyhead)
          // tell the caller the connection was successfully established
          socketRequest.write( "HTTP/"+ httpVersion
                             + " 200 Connection established\r\n\r\n" )
          socketRequest.pipe(proxySocket).pipe(socketRequest)
          }
        )
        proxySocket.on('error', function (err) {
          console.log(err)
        })
        break

    }



    socketRequest.on('error', function (err) {
      console.log(err)
    })
  }
)
server.on('error', onError)
server.on('listening', onListening)

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}

var proxyServer = require('../lib/proxy')
proxyServer.listen(3002)
